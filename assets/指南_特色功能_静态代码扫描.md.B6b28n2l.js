import{_ as s,c as a,o as e,U as i}from"./chunks/framework.2zPqJKTw.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"指南/特色功能/静态代码扫描.md","filePath":"指南/特色功能/静态代码扫描.md","lastUpdated":1715309456000}'),p={name:"指南/特色功能/静态代码扫描.md"},t=i(`<h2 id="静态代码扫描" tabindex="-1">静态代码扫描 <a class="header-anchor" href="#静态代码扫描" aria-label="Permalink to &quot;静态代码扫描&quot;">​</a></h2><h2 id="_1-提前解决代码问题" tabindex="-1">1. 提前解决代码问题 <a class="header-anchor" href="#_1-提前解决代码问题" aria-label="Permalink to &quot;1. 提前解决代码问题&quot;">​</a></h2><p>为了帮助开发者统一代码风格，<code>Python</code> 社区提出了 <code>PEP8</code> 代码编码风格，<code>Python</code> 官方同时推出了一个检查代码风格是否符合 <code>PEP8</code> 的工具，名字也叫 <code>PEP8</code>。</p><p>但是，<code>Pycharm</code> 里面的 <code>PEP8</code> 插件实际上并不能发现很多代码问题，这些问题并不会在运行时报错，因为从 <code>Python</code> 语言角度并不关心这些问题，在 <code>Pycharm</code> 编辑器里面使用快捷键 <code>ctrl + alt + L</code>，有一点点格式化的效果，能解决一些空格、换行等小问题。</p><p>这里推荐一个 <code>Python</code> 社区流行的代码格式化工具：</p><p><code>Black</code>，号称不妥协的代码格式化工具，它检测到不符合规范的代码风格直接就帮你全部格式化好，就是这么刚！</p><p>安装：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sudo pip3 install black</span></span></code></pre></div><p>使用方法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>black \${CheckPath}</span></span></code></pre></div><p>使用这个工具格式化之后，代码会被自动调整，刚开始你可能会觉得调整得很夸张，没关系坚持看，习惯之后，你会觉得很优雅，没错，这就是 <code>Pythonic Code</code> 的核心，请保持优雅～。</p><h2 id="_2-代码扫描工具" tabindex="-1">2. 代码扫描工具 <a class="header-anchor" href="#_2-代码扫描工具" aria-label="Permalink to &quot;2. 代码扫描工具&quot;">​</a></h2><p>使用根目录下 <code>pylint.sh</code> 扫描代码，在 <code>report</code> 目录下查看代码扫描报告，如果有代码问题请提前解决之后再提交。</p><p>此脚本已经使用 <code>Python</code> 社区最流行的代码扫描工具 <code>Pylint</code> 进行代码扫描。</p><p>使用方法：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pylint.sh</span></span></code></pre></div><p>运行之后会提示你要扫描的目录，比如输入 <code>apps</code> ，则会扫描 <code>apps</code> 下的所有 <code>Python</code> 代码。</p><p>在 <code>setting/pylintrc.cfg</code> 配置文件里面进行相关配置，扫描完成之后在 <code>report/pylints</code> 目录下会生成扫描报告。</p><p>代码提交需通过 <code>git review</code> 提交到 <code>gerrit</code> ，人工 <code>Code Review</code> 通过之后合入代码。</p><h2 id="_3-安装依赖" tabindex="-1">3. 安装依赖 <a class="header-anchor" href="#_3-安装依赖" aria-label="Permalink to &quot;3. 安装依赖&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git-review</span></span></code></pre></div><h2 id="_4-提交模板" tabindex="-1">4. 提交模板 <a class="header-anchor" href="#_4-提交模板" aria-label="Permalink to &quot;4. 提交模板&quot;">​</a></h2><p>在 <code>~</code> 目录下新建文件，并命名为 <code>gitcommit_template</code></p><p>将以下内容写入文件当中：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># commit type :fix（问题修复）、feat（功能开发）、style(风格修改)、refactor(重构)、docs（文档）、chore（其他)、test(测试) + 简单描述. 默认fix,根据情况修改</span></span>
<span class="line"><span>fix: </span></span>
<span class="line"><span></span></span>
<span class="line"><span># 详细说明代码的改动，包含代码的实现思路，以及为什么这么做，可能会影响哪些功能。对于代码的审核者，需要从这段描述中能完全理解代码中所有改动的内容</span></span>
<span class="line"><span>Description: </span></span>
<span class="line"><span></span></span>
<span class="line"><span># 写一段面向于产品的总结性内容，用于自动生成crp上的changlog，需要注意的事，这段描述必须从产品的角度考虑。</span></span>
<span class="line"><span>Log: </span></span>
<span class="line"><span></span></span>
<span class="line"><span># 关联pms上的bug号，提交后，则会自动在pms对应bug信息页面添加备注，关联本次提交。若本次提交为修复bug相关，则请取消注释</span></span>
<span class="line"><span>#Bug: </span></span>
<span class="line"><span></span></span>
<span class="line"><span># 修复 github issue </span></span>
<span class="line"><span>#Issue: </span></span>
<span class="line"><span></span></span>
<span class="line"><span># 关联pms上的任务号，提交后，则会自动在pms对应任务信息页面添加备注，关联本次提交。若本次提交为任务相关，则请取消注释</span></span>
<span class="line"><span>#Task:</span></span></code></pre></div><p>命令行执行:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit.template</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/gitcommit_template</span></span></code></pre></div><p>此命令将模板加入到 <code>git</code> 的提交模板中。</p><p>后续提交的时候需要关注一下几点：</p><ul><li><code>commit type</code> 对应不同的修改类型：<code>fix</code>（问题修复）、<code>feat</code>（功能开发）、<code>style</code> （风格修改）、<code>refactor</code> （重构）、<code>docs</code>（文档）、<code>chore</code>（其他)、<code>test</code> （测试）</li><li><code>commit type</code> 冒号后面加<strong>空格</strong>。</li><li><code>Description</code> 必要的情况下需要进行详细说明，比如对功能进行大改等。</li></ul><h2 id="_5-推送代码" tabindex="-1">5. 推送代码 <a class="header-anchor" href="#_5-推送代码" aria-label="Permalink to &quot;5. 推送代码&quot;">​</a></h2><p>首先添加 <code>commit</code> 信息</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 后面加文件名称</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 表示添加所有文件</span></span></code></pre></div><p>使用这条命令注意有些临时文件不要提交到仓库了。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span></span></code></pre></div><p>之后在 <code>fix: </code> 后面（注意冒号后面必须加空格，不然直接-1）写本地提交的 <code>commit</code> 信息，然后就可以提交代码了</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> review</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">当前分支</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span></span></code></pre></div><p>最好一次 <code>commit</code>，一次 <code>git review</code> ，经常有同学在本地疯狂 <code>commit</code> 最后 <code>git review</code> 报错不知道咋回事儿。 若不想每次提交都加上 <code>-r</code> 选项，执行以下命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gitreview.remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span></span></code></pre></div><p>提交代码，直接使用 <code>git review branch&lt;目标分支&gt;</code>，例如 <code>git review master</code></p>`,41),n=[t];function l(c,o,d,h,r,k){return e(),a("div",null,n)}const F=s(p,[["render",l]]);export{u as __pageData,F as default};
